{"/home/travis/build/npmtest/node-npmtest-weex-toolkit/test.js":"/* istanbul instrument in package npmtest_weex_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/lib.npmtest_weex_toolkit.js":"/* istanbul instrument in package npmtest_weex_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_weex_toolkit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_weex_toolkit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-weex-toolkit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_weex_toolkit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_weex_toolkit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_weex_toolkit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_weex_toolkit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_weex_toolkit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_weex_toolkit.__dirname + '/lib.npmtest_weex_toolkit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/bin/weex":"#!/usr/bin/env node\n\nvar xtoolkit = require('xtoolkit');\nxtoolkit.command('init','local:../src/weex-init.js');\n// if you want to preview now we wish you use  weex preview\n//xtoolkit.command('debug','local:' +  path.join(__dirname,'../build/weex-debug.js'));\nxtoolkit.command('compile','npm:weex-builder').locate(require.resolve('weex-builder'));\nxtoolkit.command('debug','npm:weex-devtool');\nxtoolkit.command('','npm:weex-previewer').locate(require.resolve('weex-previewer'));\nxtoolkit.command('create','npm:weexpack.create','');\nxtoolkit.command('platform','npm:weexpack.platform');\nxtoolkit.command('plugin','npm:weexpack.plugin');\nxtoolkit.command('build','npm:weexpack.build');\nxtoolkit.command('run','npm:weexpack.run');\nxtoolkit.command('create','npm:weexpack.create');\nxtoolkit.version(require('../package.json').version);\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/gulpfile.js":"var fs = require('fs')\n  gulp = require(\"gulp\"),\n  babel = require('gulp-babel'),\n  rename = require('gulp-rename'),\n  concat = require('gulp-concat'),\n  browserify = require(\"browserify\"),\n  path = require('path'),\n  plumber = require('gulp-plumber');\n\n\ngulp.task('clean', function() {\n  del.sync(['build/*']);    \n  return del.sync(['bin/*']);\n});\n\ngulp.task('dump',['clean'],function(callback){\n    gulp.src(\"vendor/**/*\")\n        .pipe(gulp.dest('./build/vendor'));\n    return callback()    \n});\n\n\ngulp.task('babel',function(){\n  return  gulp.src('src/**/*.js')\n  .pipe(plumber())\n  .pipe(babel({\n      presets: ['es2015'],\n      plugins: ['transform-runtime']\n  }))\n  \n  .pipe(gulp.dest('./build'));    \n})\n\ngulp.task('weex',['babel'],function(){\n  return gulp.src('./build/weex.js')\n  .pipe(wrap(\"#!/usr/bin/env node \\n\\n<%= contents %>\"))\n  .pipe(gulp.dest('./bin'))\n})\n\ngulp.task('browserify',['babel'],function(callback){\n    browserify(\"./build/debugger-client.js\", { debug: false })\n        .bundle()\n        .pipe(source('debugger-client-browserify.js'))  //vinyl-source-stream\n        .pipe(gulp.dest('./build/'))\n    return callback()\n})\n\ngulp.task('less',function(callback){\n    gulp.src('./src/css/**/*.less')\n        .pipe(less({\n            paths: [ path.join(__dirname, 'src/css/', 'includes') ]\n        }))\n        .pipe(gulp.dest('./build/css'));\n\n    gulp.src('./src/css/**/*.css')    \n        .pipe(gulp.dest('./build/css'));\n\n    return callback()\n})\n\n\ngulp.task('build',['browserify'],function(cb){\n    \n  return cb()\n})\n\ngulp.task('watch',function(){\n  gulp.watch('src/**/*.js',['build']);\n});\n\ngulp.task('default',['watch']);\n\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/src/generator.js":"const prompt = require('prompt');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst chalk = require('chalk');\nexports.generate = function (name) {\n  if(typeof(name) == 'undefined') {\n    const dirname = path.resolve('.').split(path.sep).pop();\n    getName(dirname, chalk.green('Generate project in current directory?(Y/n)'),(err,result) => {\n      if(result.name.toLowerCase() === 'n') {\n        return;\n      }\n      const dirpath = process.cwd();\n      let projectName = result.name.toLocaleLowerCase() === 'y' ? dirname : result.name;\n      copy(projectName,dirpath);\n      replace(projectName,dirpath);\n    })\n    \n  } else {\n    getName(name, chalk.green('Init your Project'), (err, result) => {\n      if (err) {\n        return;\n      }\n      let projectName = result.name;\n      const dirpath = path.join(process.cwd(),projectName);\n      createProject(projectName,dirpath);\n    })    \n  }\n  \n  \n}\n\nfunction getName(name, message = \"Project Name\", done) {\n  const schema = {\n    properties: {\n      name: {\n        message: message, \n        default: name\n      }\n    }\n  };\n  prompt.start()\n  prompt.get(schema, done)\n}\n\n\n\n// init a project\nfunction createProject(name, dirpath) {\n  fs.mkdir(dirpath, 484, function (err) {\n    if (err) {\n      if (err.code == 'EEXIST') {\n        return console.log(chalk.red( 'the folder \"' + name + '\" exists! Please rename your project.')); \n      } else {\n        console.error(err)\n      }\n    } else {\n      copy(name,dirpath);\n      replace(name,dirpath);\n    }\n  });\n}\n\n\nfunction copy(name,dirpath) {\n  const files = []\n  const src = path.join(__dirname, '..', 'vue-template/template')  \n  walk(src, files);\n  files.forEach(file => {\n    const relative = path.relative(src, file)\n    const finalPath = path.join(dirpath, relative).replace(/\\.npmignore$/, '.gitignore')\n    if (!fs.existsSync(finalPath)) {\n      console.log(chalk.grey(`file: ${finalPath} created.`));\n      \n      fs.copySync(file, finalPath)\n    }\n    else {\n      console.log(`file: ${finalPath} already existed.`)\n    }\n  })\n}\n\nfunction replace(name,dirpath) {\n  const files = ['package.json', 'README.md']\n  files.forEach(file => {\n    let filePath = path.join(dirpath, file);\n    var content = fs.readFileSync(filePath , {\n      encoding: 'utf-8'\n    })\n    content = content.replace(/{{\\s*(.+)\\s*}}/ig, function (defaultName) {\n      return name || defaultName\n    })\n    fs.writeFileSync(filePath, content)\n  })\n}\n/**\n * ref: http://stackoverflow.com/a/16684530\n */\nfunction walk(dir, files) {\n  const list = fs.readdirSync(dir)\n  list.forEach(function (file) {\n    file = path.join(dir, file)\n    const stat = fs.statSync(file)\n    if (stat && stat.isDirectory()) {\n      walk(file, files)\n    }\n    else {\n      files.push(file)\n    }\n  })\n}","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/src/weex-init.js":"// weex init an project command\nconst yargs = require('yargs');\nconst argv = yargs.argv;\n\nconst generator = require('./generator');\n\ngenerator.generate(argv._[0]);","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/template/app.js":"import foo from './src/foo.vue'\nfoo.el = '#root'\nexport default new Vue(foo)\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/template/webpack.config.js":"// You can install more packages below to config more as you like:\n// eslint\n// babel-eslint\n// eslint-config-standard\n// eslint-loader\n// eslint-plugin-html\n// eslint-plugin-promise\n// eslint-plugin-standard\n// postcss-cssnext\n\nvar path = require('path')\nvar webpack = require('webpack')\n\nvar bannerPlugin = new webpack.BannerPlugin(\n  '// { \"framework\": \"Vue\" }\\n',\n  { raw: true }\n)\n\nfunction getBaseConfig () {\n  return {\n    entry: {\n      app: path.resolve('./app.js')\n    },\n    output: {\n      path: 'dist',\n    },\n    module: {\n      // // You can use ESLint now!\n      // // Please:\n      // // 1. npm install {\n      // //   babel-eslint\n      // //   eslint\n      // //   eslint-config-standard\n      // //   eslint-loader\n      // //   eslint-plugin-html\n      // //   eslint-plugin-promise\n      // // } --save-dev\n      // // 2. set .eslintrc\n      // //   take { \"extends\": \"standard\" } for example\n      // //   so you need: npm install eslint-plugin-standard --save-dev\n      // // 3. set the config below\n      // preLoaders: [\n      //   {\n      //     test: /\\.vue$/,\n      //     loader: 'eslint',\n      //     exclude: /node_modules/\n      //   },\n      //   {\n      //     test: /\\.js$/,\n      //     loader: 'eslint',\n      //     exclude: /node_modules/\n      //   }\n      // ],\n      loaders: [\n        {\n          test: /\\.js$/,\n          loader: 'babel',\n          exclude: /node_modules/\n        }, {\n          test: /\\.vue(\\?[^?]+)?$/,\n          loaders: []\n        }\n      ]\n    },\n    vue: {\n      // // You can use PostCSS now!\n      // // Take cssnext for example:\n      // // 1. npm install postcss-cssnext --save-dev\n      // // 2. write `var cssnext = require('postcss-cssnext')` at the top\n      // // 3. set the config below\n      // postcss: [cssnext({\n      //   features: {\n      //     autoprefixer: false\n      //   }\n      // })]\n    },\n    plugins: [bannerPlugin]\n  }\n}\n\nvar webConfig = getBaseConfig()\nwebConfig.output.filename = '[name].web.js'\nwebConfig.module.loaders[1].loaders.push('vue')\n\nvar weexConfig = getBaseConfig()\nweexConfig.output.filename = '[name].weex.js'\nweexConfig.module.loaders[1].loaders.push('weex')\n\nmodule.exports = [webConfig, weexConfig]\n","/home/travis/build/npmtest/node-npmtest-weex-toolkit/node_modules/weex-toolkit/vue-template/template/app.js":"import foo from './src/foo.vue'\nfoo.el = '#root'\nexport default new Vue(foo);\n"}